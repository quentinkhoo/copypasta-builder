{"version":3,"sources":["components/Header.js","components/CopyPasta.js","App.js","index.js"],"names":["Header","Component","copyPastaMapping","require","CopyPasta","props","buildCopyPasta","event","setState","userText","target","value","buildCopyPastaFromText","text","i","console","log","copyPastaText","length","undefined","charAt","document","getElementById","innerHTML","toggleCopyButton","copyToClipboard","textToCopy","select","setSelectionRange","execCommand","focusCopyButton","copyButton","disabled","style","backgroundColor","unfocusCopyButton","state","this","className","id","autofocus","onChange","placeholder","readonly","type","display","color","onClick","onMouseEnter","onMouseLeave","App","ReactDOM","render","StrictMode"],"mappings":"k+CAaeA,G,6KARP,OACI,6BACI,uD,GAJKC,cCQfC,G,MAAmBC,EAAQ,KAmHlBC,E,kDAhHX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IA+DVC,eAAiB,SAACC,GACd,EAAKC,SAAS,CACVC,SAAUF,EAAMG,OAAOC,QAE3B,EAAKC,uBAAuBL,EAAMG,OAAOC,QApE1B,EAuEnBC,uBAAyB,SAACC,GAEtB,IAAIC,EADJC,QAAQC,IAAR,gBAAqBH,IAErB,IAAII,EAAgB,GACpB,IAAKH,EAAI,EAAGA,EAAID,EAAKK,OAAQJ,SACgBK,IAArCjB,EAAiBW,EAAKO,OAAON,IAC7BG,GAAiBf,EAAiBW,EAAKO,OAAON,IAE9CG,GAAiBJ,EAAKO,OAAON,GAGrC,EAAKN,SAAS,CACVS,cAAeA,IAEnBI,SAASC,eAAe,UAAUC,UAAYN,EAC9C,EAAKO,oBAtFU,EAyFnBC,gBAAkB,WACd,IAAIC,EAAaL,SAASC,eAAe,UACzCI,EAAWC,SACXD,EAAWE,kBAAkB,EAAG,OAChCP,SAASQ,YAAY,QAEJR,SAASC,eAAe,QAC9BX,MAxGW,WAQP,EAmGnBmB,gBAAkB,WACd,IAAIC,EAAaV,SAASC,eAAe,SACb,IAAxBS,EAAWC,WACXD,EAAWE,MAAMC,gBAAkB,YAtGxB,EA0GnBC,kBAAoB,WACCd,SAASC,eAAe,QAC9BW,MAAMC,gBAAkB,aA1GnC,EAAKE,MAAQ,CACT3B,SAAU,GACVQ,cAAe,IAJJ,E,gEASfoB,KAAKb,qB,+BAIL,OACI,yBAAKc,UAAU,aACX,yBAAKA,UAAU,iBACX,yBAAKA,UAAU,iBACX,8BACIC,GAAG,QACHC,UAAU,OACVF,UAAU,YACVG,SAAUJ,KAAK/B,eACfoC,YAjCH,iCAqCT,yBAAKJ,UAAU,kBACX,yBAAKA,UAAU,kBACX,8BACIC,GAAG,SACHD,UAAU,aACVI,YAzCF,gCA0CEC,SAAS,SAEb,2BACIJ,GAAG,OACHK,KAAK,SACLN,UAAU,aACVO,QAAQ,QACRZ,MAAO,CAACa,MA7CJ,QA8CJC,QAASV,KAAKZ,gBACduB,aAAcX,KAAKP,gBACnBmB,aAAcZ,KAAKF,kBACnBxB,MApDL,2B,yCA6Df,IAAIoB,EAAaV,SAASC,eAAe,QACzCS,EAAWpB,MA9DI,oBA+DQU,SAASC,eAAe,UAAUC,UACpCL,OAAS,GAC1Ba,EAAWE,MAAMa,MA7DE,QA8DnBf,EAAWC,UAAW,IAEtBD,EAAWE,MAAMa,MAjEG,OAkEpBf,EAAWC,UAAW,O,GA7DV/B,aCETiD,E,uKATP,OACI,yBAAKZ,UAAU,OACX,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GALErC,aCClBkD,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFhC,SAASC,eAAe,W","file":"static/js/main.9127730d.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport \"../styles/Header.css\";\r\n\r\nclass Header extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>Copy-Pasta Builder</h1>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Header;\r\n","import React, { Component } from 'react';\r\nimport \"../styles/CopyPasta.css\";\r\n\r\nconst inputPlaceholder = \"Your nonsense goes here...\"\r\nconst outputPlaceholder = \"Your Copy-Pasta appears here!\"\r\nconst copyButtonText = \"Copy to Clipboard\"\r\nconst copyButtonClickedText = \"Copied!\"\r\n\r\nconst copyButtonDisabledColor = \"grey\";\r\nconst copyButtonEnabledColor = \"white\";\r\n\r\nconst copyPastaMapping = require(\"../mappings/wide-character.json\")\r\n\r\nclass CopyPasta extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            userText: \"\",\r\n            copyPastaText: \"\"\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.toggleCopyButton();\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <div className=\"copyPasta\">\r\n                <div className=\"copyPastaLeft\">\r\n                    <div className=\"shadowBoxLeft\">\r\n                        <textarea\r\n                            id=\"input\"\r\n                            autofocus=\"true\"\r\n                            className=\"textInput\"\r\n                            onChange={this.buildCopyPasta}\r\n                            placeholder={inputPlaceholder}\r\n                        />\r\n                    </div>\r\n                </div>\r\n                <div className=\"copyPastaRight\">\r\n                    <div className=\"shadowBoxRight\">\r\n                        <textarea\r\n                            id=\"output\"\r\n                            className=\"textOutput\"\r\n                            placeholder={outputPlaceholder}\r\n                            readonly=\"true\"\r\n                        />\r\n                        <input\r\n                            id=\"copy\"\r\n                            type=\"button\"\r\n                            className=\"copyButton\"\r\n                            display=\"block\"\r\n                            style={{color: copyButtonDisabledColor}}\r\n                            onClick={this.copyToClipboard}\r\n                            onMouseEnter={this.focusCopyButton}\r\n                            onMouseLeave={this.unfocusCopyButton}\r\n                            value={copyButtonText}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    toggleCopyButton() {\r\n        var copyButton = document.getElementById('copy');\r\n        copyButton.value = copyButtonText;\r\n        var currentCopyPasta = document.getElementById('output').innerHTML;\r\n        if (currentCopyPasta.length > 0) {\r\n            copyButton.style.color = copyButtonEnabledColor;\r\n            copyButton.disabled = false;\r\n        } else {\r\n            copyButton.style.color = copyButtonDisabledColor;\r\n            copyButton.disabled = true;\r\n        }\r\n    }\r\n\r\n    buildCopyPasta = (event) => {\r\n        this.setState({\r\n            userText: event.target.value\r\n        });\r\n        this.buildCopyPastaFromText(event.target.value);\r\n    }\r\n\r\n    buildCopyPastaFromText = (text) => {\r\n        console.log(`text: ${text}`)\r\n        var i;\r\n        var copyPastaText = \"\";\r\n        for (i = 0; i < text.length; i++) {\r\n            if (copyPastaMapping[text.charAt(i)] !== undefined) {\r\n                copyPastaText += copyPastaMapping[text.charAt(i)];\r\n            } else {\r\n                copyPastaText += text.charAt(i);\r\n            }\r\n        }\r\n        this.setState({\r\n            copyPastaText: copyPastaText\r\n        })\r\n        document.getElementById('output').innerHTML = copyPastaText;\r\n        this.toggleCopyButton();\r\n    }\r\n\r\n    copyToClipboard = () => {\r\n        var textToCopy = document.getElementById('output');\r\n        textToCopy.select();\r\n        textToCopy.setSelectionRange(0, 99999);\r\n        document.execCommand(\"copy\");\r\n        // Do some UX stuff\r\n        var copyButton = document.getElementById('copy');\r\n        copyButton.value = copyButtonClickedText;\r\n    }\r\n\r\n    focusCopyButton = () => {\r\n        var copyButton = document.getElementById('copy');\r\n        if (copyButton.disabled === false) {\r\n            copyButton.style.backgroundColor = \"#2aac2a\"\r\n        }\r\n    }\r\n\r\n    unfocusCopyButton = () => {\r\n        var copyButton = document.getElementById('copy');\r\n        copyButton.style.backgroundColor = \"limegreen\";\r\n    }\r\n}\r\n\r\nexport default CopyPasta;\r\n","import React, { Component } from 'react';\nimport Header from \"./components/Header.js\";\nimport CopyPasta from \"./components/CopyPasta.js\";\n\nclass App extends Component {\n    render() {\n        return (\n            <div className=\"App\">\n                <Header/>\n                <CopyPasta/>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}